openapi: 3.0.0
servers:
  - description: Local server
    url: http://0.0.0.0:8000
info:
  title: 'Fireblocks Provider Connectivity API v2'
  version: 0.1.1
  x-logo:
    url: 'https://drive.google.com/uc?id=1sseKokeIoh7hnUpV8skWYF_VzncF3slT'
    altText: 'Fireblocks logo'

  contact:
    name: Fireblocks
    url: https://fireblocks.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

  description: |
    Fireblocks Provider Connectivity API defines the interface for integration of third-party
    providers into Fireblocks platform.

    # Intro    

    Fireblocks connects businesses across the crypto world as the digital asset infrastructure for over 1,800 leading trading desks, hedge funds, brokerages, custodians, 3rd parties, and banks. To meet the demand for third-party services that want to access the liquidity of institutional investors and traders, Fireblocks is opening its platform for fast third-party integration.
    Reach out to us for a partnership agreement and add a Connector to have your product integrated.

    # How Fireblocks customers access third-party accounts

    Fireblocks customers use the Fireblocks web-based console to connect their Fireblocks account to third-party solution providers. Fireblocks supports the integration of various solution providers such as banks, cryptocurrency exchanges, and cryptocurrency on-ramp and off-ramp services.

    After a third-party account is connected, customers use the Fireblocks Console and Fireblocks API to:
      * View account balances for their primary, secondary, and trading accounts.
      * Move funds between their accounts and their Fireblocks Vaults.
      * Withdraw funds from and deposit funds to their accounts.
      * Convert cryptocurrencies to and from fiat currencies (for on/off-ramping).
      * Track the status of their withdrawals and deposits.
      * View and audit their transaction history.

    # Multiple ways of integration

    Fireblocks gives you as a partner the ability to integrate your services and be listed on Fireblocks platform as a bank or an exchange (including registering as an on/off-ramp provider). Using Fireblocks Connectivity API, Fireblocks partners get the needed flexibility to choose the right type of integration for their services.

    # How does it work?

    To be listed as a partner on Fireblocks platform, you must implement the Fireblocks Connectivity API. Fireblocks platform will then be able to query the API and present the Fireblocks users with the operations and capabilities offered by your service.

    # Register your 3rd party with Fireblocks.

    Once your license agreement for listing your 3rd party with Fireblocks is signed, the Fireblocks technical team will request the following 3rd party registration settings:
      1. Display name: i.e., “My Exchange” or “My Exchange Sandbox”
      2. Icon: a 32x32 .svg file
      3. Step-by-step guide for generating an API Key from your 3rd party platform.
          * A public link to your knowledge base is preferred (A sharable document or PDF is also acceptable).
      4. Base URL for your API endpoints: i.e., https://my-service.com/fireblocks
          * sandbox environment endpoint: https://my-service.com/fireblocks_sandbox
      5. Select your authentication preferences:
          * #### HMAC:
            * Request encoding format: valid values are PLAIN, BASE64, HEXSTR, BASE58, BASE32
            * Request signing format: valid values are: SHA512, SHA3_256, SHA256
            * Signature encoding result: valid values are PLAIN, BASE64, HEXSTR, BASE58, BASE32
          * #### RSA:
            * Request encoding format: valid values are PLAIN, BASE64, HEXSTR, BASE58, BASE32
            * Request signing format: valid values are: SHA512, SHA3_256, SHA256
            * Signature encoding result: valid values are PLAIN, BASE64, HEXSTR, BASE58, BASE32
          * #### ECDSA:
            * Request encoding format: valid values are PLAIN, BASE64, HEXSTR, BASE58, BASE32
            * Request signing format: valid values are: SHA256
            * Signature encoding result: valid values are PLAIN, BASE64, HEXSTR, BASE58, BASE32


    # Requests signing

    All the requests from Fireblocks platform will be signed. And will have the following properties:
      * Required headers
        * All REST requests from Fireblocks platform will include the following headers:

          * `X-FBAPI-KEY`

            * The API key as a string.
          
          * `X-FBAPI-SIGNATURE`
            
            * The payload signature output.

          * `X-FBAPI-TIMESTAMP`
            
            * A timestamp of the request (in milliseconds)
            
            * The `X-FBAPI-TIMESTAMP` header is the number of milliseconds since Unix Epoch in UTC. e.g., 1547015186532.
            
            * The difference between the timestamp generated by Fireblocks platform and the recieved time must be less than X seconds. (The amount of seconds (=X) is up to you as the service provider to decide), any request that will be received after X Seconds is exected to be rejected.
          
          * `X-FBAPI-NONCE`
            
            * Request unique identifier (UUID)

      * Additional properties
          * The timestamp in the signature payload is consistent with the `X-FBAPI-TIMESTAMP` field in the request header.
            
          * The body to be signed is consistent with the content of the request body.
          
          * The method is always UPPER CASE.
          
          * For GET requests, the endpoint in the signature payload contains the query string. e.g. `/trading/books?limit=10&...`
          
          * The endpoint in the signature payload is always in a path-relative format.
          
          * The body is `""` if there is no request body (for GET requests).


    # Signing

    In order to sign the requests, Fireblocks platform will use an `API-KEY` and `SECRET` provided by you.

    Based on the Authentication scheme provided when registered, the request signature procedure is as follows:

      * #### Using HMAC
        1. Create a prehash string `{timestamp+nonce+method+endpoint+body}`
        2. Apply an encoding onto the prehash string (Pre-encoding is configurable: `URL-ENCODED`, `BASE64`, `HEXSTR`, `BASE58`, `BASE32`)
            
            [The request body is a JSON string and needs to be the same with the parameters passed by the API]
        3. Use `SECRET` to sign the string with HMAC (Internal hash function is configurable: `SHA512`, `SHA3_256`, `SHA256`)
        4. Apply an additional encoding onto the signature result (Post-encoding is configurable: `URL-ENCODED`, `BASE64`, `HEXSTR`, `BASE58`, `BASE32`)

      * #### Using RSA

        Supported RSA Parameters [`PKCS1v15`]
        
        `SECRET` is defined to be the Private RSA PEM.
        1. Create a prehash string `{timestamp+nonce+method+endpoint+body}`
        2. Apply an encoding onto the prehash string (Pre-encoding is configurable: `URL-ENCODED`, `BASE64`, `HEXSTR`, `BASE58`, `BASE32`)
            
            [The request body is a JSON string and needs to be the same with the parameters passed by the API]
        3. Use `SECRET` to sign the string with RSA (Internal hash function is configurable: `SHA512`, `SHA3_256`, `SHA256`)
        4. Apply an additional encoding onto the signature result (Post-encoding is configurable: `URL-ENCODED`, `BASE64`, `HEXSTR`, `BASE58`, `BASE32`)

      * #### Using ECDSA

        Supported ECDSA Parameters [`prime256v1`/`secp256k1`]
        
        `SECRET` is defined to be the Private ECDSA PEM. ECDSA result signature has an ASN1.DER format.

        1. Create a prehash string `{timestamp+nonce+method+endpoint+body}`
        2. Apply an encoding onto the prehash string (Pre-encoding is configurable: `URL-ENCODED`, `BASE64`, `HEXSTR`, `BASE58`, `BASE32`)

            [The request body is a JSON string and needs to be the same as the parameters passed by the API]
        3. Use `SECRET` to sign the string with ECDSA (The internal hash function is not configurable and is set to `SHA256`)
        4. Apply an additional encoding onto the signature result (Post-encoding is configurable: `URL-ENCODED`, `BASE64`, `HEXSTR`, `BASE58`, `BASE32`).

    # Capabilities

    The API consists of separate optional components with flexible capabilities. Fireblocks
    platform uses `/capabilities/*` endpoints to discovery dynamically the supported components
    and capabilities.

    The discovery process starts with calling 'GET /capabilities'. The response specifies
    the implemented API version and an array of the supported API capabilities; for example:

    ```javascript
      {
        "version": "1.0.0",
        "components": ["balances," "transfers," "trading", "liquidity"]
      }
    ```

    Based on the response, Fireblocks platform uses the endpoints specific to each component
    to discover the specific capabilities for each component:

    - `GET /capabilities/assets` defines token assets.

    - `GET /capabilities/balances` lists supported balance assets.

    - `GET /capabilities/transfers/withdrawals` lists supported withdrawal methods.

    - `GET /capabilities/transfers/deposits` lists supported deposit methods.

    - `GET /capabilities/liquidity/quotes` lists supported currency conversions.

    - `GET /capabilities/trading/books` lists supported order books.

    ### Note:

    When declaring implementation of a specific capabilities, 
    Fireblocks platform will assume that all the endpoints with that capabilities are implemented. 
    For example, when the response for `/capabilities` include `trading` in the components array, it is expected that all the endpoints with _"Trading"_ tag will be implemented. 

    This allows you, as a partner, to define the operations supported by your service.
    <img src="https://fireblocks.github.io/fireblocks-network-link/v2/fireblocks-connectivity-api-capabilities-flow.png"/>


    # Pagination

    Some endpoints return collections. However, the entire collection is typically not returned in a single call. 

    Instead, Fireblocks platform may request the information with a limit on the number of returned items.

    In addition to the number of returned items, the Fireblocks platform may request the items from an index or to an index. It is expected that the order of items wil be consistent over time.

    The pagination parameters are defined as query parameters, for example
    ```javascript
      /accounts?limit=100&startingAfter=7885a47b-0719-4448-b59e-3b8497cd1685
    ```

    # Assets and transfer methods

    An asset in Fireblocks Connectivity API is either a national currency (per [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217)), one
    of the blockchain native cryptocurrencies, explicitly listed in the API specification, or an 
    arbitrary blockchain token.

    Any token used anywhere in the API must be listed in the response to `GET /capabilities/assets`.
    The returned object assigns a unique ID to each token. When an asset is used in a request or
    a response it is identified by its code/symbol, if it is an asset predefined by the API
    specification; otherwise, it is identified by the aforementioned unique ID.

    A provider declares which balance assets it supports by listing the currencies in the reply to 
    `GET /capabilities/balances` request. A provider can choose to support test versions of assets
    by setting `testAsset` flag in the capabilities response.

    Transfer methods define how assets are withdrawn and deposited. Each transfer method starts
    as a capability. Given a capability, it can be used to define transfer addresses. Finally,
    an address is used to make an actual transfer.

    For example, calling `GET /capabilities/transfers/withdrawals` could return the following
    object:

    ```javascript
    [
      {
        balanceAsset: {
          coinType: 'NationalCurrency',
          currencyCode: 'USD'
        },
        capability: {
          transferMethod: 'PublicBlockchain',
          blockchain: 'Ethereum',
          asset: {
            assetId: 'a36c6daa-8ce9-4fd5-9b1d-5c33901a08e9'
          }
        }
      }
    ]
    ```

    And calling `GET /capabilities/assets` returns

    ```javascript
    [
      {
        id: 'a36c6daa-8ce9-4fd5-9b1d-5c33901a08e9',
        name: 'Tether USD',
        symbol: 'USDT',
        type: 'Erc20Token',
        decimalPlaces: 6,
        blockchain: 'Ethereum',
        decimalPlaces: 6,
        contractAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
      }
    ]
    ```

    These capabilities means USD balance could be withdrawn as USDT over Ethereum. 

    In the next step, this capability could be used to define a specific withdrawal destination:

    ```javascript
    {
      transferMethod: 'PublicBlockchain',
      blockchain: 'Ethereum',
      asset: {
        assetId: 'a36c6daa-8ce9-4fd5-9b1d-5c33901a08e9'
      },
      amount: '10',
      address: '0xEC52EC04b660a15B6C7A7C8C85f102B2C6cb2697'
    }
    ```

    When used for an actual withdrawal it becomes a transfer — an Ethereum transaction with an actual
    transaction hash, in this example:

    ```javascript
    {
      transferMethod: 'PublicBlockchain',
      blockchain: 'Ethereum',
      asset: {
        assetId: 'a36c6daa-8ce9-4fd5-9b1d-5c33901a08e9'
      },
      amount: '10',
      address: '0xEC52EC04b660a15B6C7A7C8C85f102B2C6cb2697',
      blockchainTxId: '0xb3b773aaf5929b2f94db973da8bb6f31b334cc57eaef872bd927119946067843',
    }
    ```

    Notice, that in a deposit or a withdrawal operation the operation asset and the balance asset
    are specified separately, thus enabling scenarios when assets appear as different currencies
    when they "move". 

    Moreover it is possible to define balances as arbitrary buckets, as long as
    there is a clear definition which assets can be deposited and withdrawn from the bucket.

    The same principles apply to fiat transfers. In general, asset transitions could be described
    as follows:

    ```  
        ┌───────────┐    ┌───────────┐    ┌──────────────┐    ┌───────────┐    ┌──────────────┐
        │  Deposit  │    │  Balance  │    │              │    │  Balance  │    │  Withdrawal  │
        │           ├───►│           ├───►│  Conversion  ├───►│           ├───►│              │
        │  Asset 1  │    │  Asset 2  │    │              │    │  Asset 3  │    │   Asset 4    │
        └───────────┘    └───────────┘    └──────────────┘    └───────────┘    └──────────────┘
    Example: MXN              MXN                                  USD               USDC
    ```

tags:
  - name: capabilities
    description: Server capabilities discovery operations.
  - name: accounts
    description: User accounts management operations.
  - name: balances
    description: Balances management operations.
  - name: historicBalances
    description: Historic balances operations.

paths:
  /capabilities:
    get:
      operationId: getCapabilities
      summary: Describe server capabilities
      description: >-
        Returns the API version and all the capabilities that the server supports.  
          
        The capabilities are specified as a map. The map keys are the capability
        names and the values are lists of account IDs. If all the accounts support
        a capability, an asterisk could be used, instead of listing all the accounts.
      tags: [ capabilities ]
      parameters:
        - $ref: '#/components/parameters/X-FBAPI-KEY'
        - $ref: '#/components/parameters/X-FBAPI-NONCE'
        - $ref: '#/components/parameters/X-FBAPI-TIMESTAMP'
        - $ref: '#/components/parameters/X-FBAPI-SIGNATURE'
      responses:
        '200':
          description: >-
            Server capability details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capabilities'
              examples:
                allAccountsSupportAllCapabilities:
                  summary: All accounts support all capabilities
                  value:
                    version: "1.0.37"
                    components:
                      accounts: "*"
                      balances: "*"
                      transfers: "*"
                      transfersBlockchain: "*"
                      transfersFiat: "*"
                      transfersPeerAccounts: "*"
                      trading: "*"
                      liquidity: "*"
                      subscriptions: "*"
                allAccountsSupportSomeCapabilities:
                  summary: All accounts support only balances and accounts capabilities
                  value:
                    version: "1.2.0"
                    components:
                      accounts: "*"
                      balances: "*"
                twoAccountsSupportTransfers:
                  summary: Only two accounts support fiat transfers
                  value:
                    version: "1.2.0"
                    components:
                      accounts: "*"
                      balances: "*"
                      transfers:
                        - "6cd2fe1e-d0bc-4fad-a9ba-9384e0fdfdc0"
                        - "7885a47b-0719-4448-b59e-3b8497cd1685"
                      transfersFiat:
                        - "6cd2fe1e-d0bc-4fad-a9ba-9384e0fdfdc0"
                        - "7885a47b-0719-4448-b59e-3b8497cd1685"
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
        '5XX':
          $ref: '#/components/responses/ErrorResponse'

  /capabilities/assets:
    get:
      operationId: getAdditionalAssets
      summary: Get list of supported additional assets
      description: >-
        Returns assets, supported in addition to the predefined national
        currencies and the native cryptocurrencies.
      tags: [ capabilities ]
      parameters:
        - $ref: '#/components/parameters/X-FBAPI-KEY'
        - $ref: '#/components/parameters/X-FBAPI-NONCE'
        - $ref: '#/components/parameters/X-FBAPI-TIMESTAMP'
        - $ref: '#/components/parameters/X-FBAPI-SIGNATURE'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationStartingAfter'
        - $ref: '#/components/parameters/PaginationEndingBefore'
      responses:
        '200':
          description: List of additional assets.
          content:
            application/json:
              schema:
                type: object
                required: [assets]
                properties:
                  assets:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssetDefinition'
              examples:
                usdcTokens:
                  summary: USDC tokens on various blockchains
                  value:
                    assets: [
                      {
                        "id": "360de0ad-9ba1-45d5-8074-22453f193d65",
                        "type": "Erc20Token",
                        "blockchain": "Ethereum",
                        "contractAddress": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                        "name": "USDC",
                        "symbol": "USDC",
                        "description": "USDC is a fully collateralized US Dollar stablecoin developed by CENTRE, the open source project with Circle being the first of several forthcoming issuers.",
                        "decimalPlaces": 6,
                      }, {
                        "id": "606bce6b-ff15-4704-9390-b9e32a6cfcff",
                        "type": "Erc20Token",
                        "blockchain": "Polygon PoS",
                        "contractAddress": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
                        "name": "USDC",
                        "symbol": "USDC",
                        "description": "USD Coin is an ERC-20 stablecoin brought to you by Circle and Coinbase. It is issued by regulated and licensed financial institutions that maintain full reserves of the equivalent fiat currency.",
                        "decimalPlaces": 6,
                      }, {
                        "id": "4386cf4d-83b2-4410-96da-0d3919a45506",
                        "type": "StellarToken",
                        "blockchain": "Stellar",
                        "issuerAddress": "GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN",
                        "stellarCurrencyCode": "USDC",
                        "name": "USDC",
                        "symbol": "USDC",
                        "description": "USDC is a fully collateralized US Dollar stablecoin, based on the open source fiat stablecoin framework developed by Centre.",
                        "decimalPlaces": 2,
                      }
                    ]
                usdcBucket:
                  summary: USDC bucket
                  description: Buckets are used to aggregate various currencies in one balance entry.
                  value:
                    assets: [
                      {
                        "id": "f0844d82-7097-4521-95bc-d843724a893e",
                        "type": "BucketAsset",
                        "name": "USDC",
                        "symbol": "USDC",
                        "description": "Aggregation of all USDC token over the different blockchains.",
                        "decimalPlaces": 6,
                      }
                    ]
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
        '5XX':
          $ref: '#/components/responses/ErrorResponse'

  /capabilities/assets/{id}:
    get:
      operationId: getAssetDetails
      summary: Get details of a supported additional asset.
      description: >-
        Returns the details of an assets, supported in addition to the predefined
        national currencies and the native cryptocurrencies.
      tags: [ capabilities ]
      parameters:
        - $ref: '#/components/parameters/X-FBAPI-KEY'
        - $ref: '#/components/parameters/X-FBAPI-NONCE'
        - $ref: '#/components/parameters/X-FBAPI-TIMESTAMP'
        - $ref: '#/components/parameters/X-FBAPI-SIGNATURE'
        - $ref: '#/components/parameters/EntityIdPathParam'
      responses:
        '200':
          description: List of additional assets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetDefinition'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
        '5XX':
          $ref: '#/components/responses/ErrorResponse'

  /accounts:
    get:
      operationId: getAccounts
      summary: Get list of sub-accounts
      tags: [ accounts ]
      parameters:
        - $ref: '#/components/parameters/X-FBAPI-KEY'
        - $ref: '#/components/parameters/X-FBAPI-NONCE'
        - $ref: '#/components/parameters/X-FBAPI-TIMESTAMP'
        - $ref: '#/components/parameters/X-FBAPI-SIGNATURE'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationStartingAfter'
        - $ref: '#/components/parameters/PaginationEndingBefore'
        - $ref: '#/components/parameters/AccountBalancesQueryParam'
      responses:
        '200':
          description: List of sub-accounts.
          content:
            application/json:
              schema:
                type: object
                required: [ accounts ]
                properties:
                  accounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
        '5XX':
          $ref: '#/components/responses/ErrorResponse'

  /accounts/{accountId}:
    get:
      operationId: getAccountDetails
      summary: Get sub-account details
      tags: [ accounts ]
      parameters:
        - $ref: '#/components/parameters/X-FBAPI-KEY'
        - $ref: '#/components/parameters/X-FBAPI-NONCE'
        - $ref: '#/components/parameters/X-FBAPI-TIMESTAMP'
        - $ref: '#/components/parameters/X-FBAPI-SIGNATURE'
        - $ref: '#/components/parameters/AccountBalancesQueryParam'
        - $ref: '#/components/parameters/SubAccountIdPathParam'
      responses:
        '200':
          description: List of sub-accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
        '5XX':
          $ref: '#/components/responses/ErrorResponse'

  /accounts/{accountId}/balances:
    get:
      operationId: getBalances
      summary: Get current balances
      tags: [ balances ]
      parameters:
        - $ref: '#/components/parameters/X-FBAPI-KEY'
        - $ref: '#/components/parameters/X-FBAPI-NONCE'
        - $ref: '#/components/parameters/X-FBAPI-TIMESTAMP'
        - $ref: '#/components/parameters/X-FBAPI-SIGNATURE'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationStartingAfter'
        - $ref: '#/components/parameters/PaginationEndingBefore'
        - $ref: '#/components/parameters/AssetIdQueryParam'
        - $ref: '#/components/parameters/NationalCurrencyCodeQueryParam'
        - $ref: '#/components/parameters/CryptocurrencySymbolQueryParam'
        - $ref: '#/components/parameters/SubAccountIdPathParam'
      responses:
        '200':
          description: List of asset balances.
          content:
            application/json:
              schema:
                type: object
                required: [ balances ]
                properties:
                  balances:
                    $ref: '#/components/schemas/Balances'
              examples:
                nationalCurrency:
                  summary: National currency balance
                  value: {
                    "balances": [
                      {
                        "id": "4ff63424-7e09-4cdf-b7f1-da7b7c65eabe",
                        "asset": {
                          "nationalCurrencyCode": "USD"
                        },
                        "availableAmount": "1743.43",
                        "lockedAmount": "0"
                      }
                    ]
                  }
                blockchainNativeCurrency:
                  summary: Blockchain native currency balance
                  value: {
                    "balances": [
                      {
                        "id": "76a33ed9-8aa2-4781-93f8-d2369c0c2b14",
                        "asset": {
                          "blockchain": "Bitcoin",
                          "cryptocurrencySymbol": "BTC"
                        },
                        "availableAmount": "7.00008214",
                        "lockedAmount": "0"
                      }
                    ]
                  }
                bucketCurrency:
                  summary: Usage of tokens and buckets in balance
                  description: >-
                    `assetId` must be one of the IDs returned by `GET /capabilities/assets`.
                    The ID in this example is the ID of the USDC bucket defined in the example
                    responses of `GET /capabilities/assets`.
                  value: {
                    "balances": [
                      {
                        "id": "6f572d77-2f8d-4962-adf4-de4a62bc236b",
                        "asset": {
                          "assetId": "f0844d82-7097-4521-95bc-d843724a893e"
                        },
                        "availableAmount": "95.03"
                      }
                    ]
                  }
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
        '5XX':
          $ref: '#/components/responses/ErrorResponse'

  /accounts/{accountId}/historic-balances:
    get:
      operationId: getHistoricBalances
      summary: Get balances at specific time in the past
      tags: [ historicBalances ]
      parameters:
        - $ref: '#/components/parameters/X-FBAPI-KEY'
        - $ref: '#/components/parameters/X-FBAPI-NONCE'
        - $ref: '#/components/parameters/X-FBAPI-TIMESTAMP'
        - $ref: '#/components/parameters/X-FBAPI-SIGNATURE'
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationStartingAfter'
        - $ref: '#/components/parameters/PaginationEndingBefore'
        - $ref: '#/components/parameters/AssetIdQueryParam'
        - $ref: '#/components/parameters/NationalCurrencyCodeQueryParam'
        - $ref: '#/components/parameters/CryptocurrencySymbolQueryParam'

        - $ref: '#/components/parameters/SubAccountIdPathParam'
        - name: time
          description: Time of the requested balances.
          in: query
          required: true
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: List of asset balances.
          content:
            application/json:
              schema:
                type: object
                required: [ balances ]
                properties:
                  balances:
                    $ref: '#/components/schemas/Balances'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '4XX':
          $ref: '#/components/responses/ErrorResponse'
        '5XX':
          $ref: '#/components/responses/ErrorResponse'

components:
  parameters:
    X-FBAPI-KEY:
      name: X-FBAPI-KEY
      in: header
      required: true
      description: API authentication key.
      schema:
        type: string

    X-FBAPI-TIMESTAMP:
      name: X-FBAPI-TIMESTAMP
      in: header
      required: true
      description: Request timestamp in milliseconds since Unix epoch.
      schema:
        type: number

    X-FBAPI-NONCE:
      name: X-FBAPI-NONCE
      in: header
      required: true
      description: Unique identifier of the request.
      schema:
        type: string

    X-FBAPI-SIGNATURE:
      name: X-FBAPI-SIGNATURE
      in: header
      required: true
      description: >-
        Request signature using the chosen cryptographic algorithm.
        The signature is to be calculated on concatenation of the
        following request fields in the specified order:
        
        - `X-FBAPI-TIMESTAMP`
        - `X-FBAPI-NONCE`
        - HTTP request method in upper case
        - Endpoint path, including the query parameters
        - Request body
      schema:
        type: string

    EntityIdPathParam:
      name: id
      in: path
      required: true
      description: Entity unique identifier.
      schema:
        type: string

    SubAccountIdPathParam:
      name: accountId
      in: path
      required: true
      description: Sub-account identifier.
      schema:
        type: string
        pattern: ^[A-Za-z0-9_-]+$

    ListOrderQueryParam:
      name: order
      in: query
      description: Controls the order of the items in the returned list.
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc

    PaginationLimit:
      name: limit
      in: query
      description: Maximum number of returned items.
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 10

    PaginationStartingAfter:
      name: startingAfter
      in: query
      description: >-
        Object ID.
        Instructs to return the items immediately following this
        object. Cannot be used together with `endingBefore`.
      schema:
        type: string

    PaginationEndingBefore:
      name: endingBefore
      in: query
      description: >-
        Object ID.
        Instructs to return the items immediately preceding this
        object. Cannot be used together with `startingAfter`.
      schema:
        type: string

    AssetIdQueryParam:
      name: assetId
      description: >-
        ID of one of the assets returned in get-additional-assets.
        Limits the response to one.
        Cannot be used in conjunction with cryptocurrencySymbol or nationalCurrencyCode
      in: query
      schema:
        type: string
    
    NationalCurrencyCodeQueryParam:
      name: nationalCurrencyCode
      description: >-
        Limits the response to one asset with the provided NationalCurrencyCode
        Cannot be used in conjunction with cryptocurrencySymbol or assetId
      in: query
      schema:
        $ref: '#/components/schemas/NationalCurrencyCode'

    CryptocurrencySymbolQueryParam:
      name: cryptocurrencySymbol
      description: >-
        Limits the response to one asset with the provided CryptocurrencySymbol
        Cannot be used in conjunction with nationalCurrencyCode or assetId
      in: query
      schema:
        $ref: '#/components/schemas/CryptocurrencySymbol'

    AccountBalancesQueryParam:
      name: balances
      in: query
      description: >-
        Flag to include the account balances in the response.
        Balances are not returned by default for account endpoints.
      schema:
        type: boolean

  responses:
    BadRequestResponse:
      description: Request could not be processed due to a client error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestError'

    UnauthorizedResponse:
      description: Request is unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'

    ErrorResponse:
      description: Failed to process request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'

  schemas:
    GeneralError:
      description: >-
        Should be returned only if there in no more specific object.
      type: object
      required: [ message, errorType ]
      properties:
        message:
          description: Description of the error.
          type: string
        errorType:
          enum:
            - internal-error
            - not-found

    BadRequestError:
      description: >-
        Request could not be processed due to a client error.
        
        If the error is caused by a missing or wrong property in the request,
        `errorType` must have the value `schema-property-error` and the properties 
        `propertyName` and `requestPart` must be specified. For more general
        schema errors, the error type should be `schema-error` and `requestPart` must
        be specified. For all the other cases the error type should be `bad-request`.
      type: object
      required: [ message, errorType ]
      properties:
        message:
          description: Description of the error.
          type: string
        errorType:
          enum:
            - schema-error
            - schema-property-error
            - bad-request
            - unknown-asset
            - unsupported-conversion
            - quote-not-ready
            - deposit-address-disabled
            - order-not-trading
            - idempotency-key-reuse
        propertyName:
          description: Name of property that caused the error.
          type: string
        requestPart:
          $ref: '#/components/schemas/RequestPart'

    UnauthorizedError:
      description: >-
        Request is unauthorized
      type: object
      required: [ message, errorType ]
      properties:
        message:
          description: Description of the error.
          type: string
        errorType:
          enum:
            - unauthorized
        propertyName:
          description: Name of property that caused the error.
          enum:
            - X-FBAPI-KEY
        requestPart:
          description: Request part where the error occurred.
          enum:
            - headers

    RequestPart:
      description: Request part where the error occurred.
      enum:
        - params
        - body
        - querystring
        - headers

    Capabilities:
      type: object
      required: [ version, components ]
      properties:
        version:
          description: Version number of the API specification that this server implements
          type: string
          pattern: ^(\d)+\.(\d)+\.(\d)+$
          example: '1.0.37'
        components:
          $ref: '#/components/schemas/ApiComponents'

    ApiComponents:
      description: >-
        Lists supported API components and which sub-accounts support the component.
      type: object
      required: [ accounts, balances ]
      properties:
        accounts:
          $ref: '#/components/schemas/AccountsSet'
        balances:
          $ref: '#/components/schemas/AccountsSet'
        historicBalances:
          $ref: '#/components/schemas/AccountsSet'
        transfers:
          $ref: '#/components/schemas/AccountsSet'
        transfersBlockchain:
          $ref: '#/components/schemas/AccountsSet'
        transfersFiat:
          $ref: '#/components/schemas/AccountsSet'
        transfersPeerAccounts:
          $ref: '#/components/schemas/AccountsSet'
        trading:
          $ref: '#/components/schemas/AccountsSet'
        liquidity:
          $ref: '#/components/schemas/AccountsSet'
        subscriptions:
          $ref: '#/components/schemas/AccountsSet'

    AccountsSet:
      description: >-
        Indicates to which sub-accounts an operation applies.
        The value could be either a list of sub-account IDs or "*".
        The value "*" indicates all the sub-accounts.
      oneOf:
        - type: string
          pattern: '^\*$'
        - type: array
          items:
            type: string

    PositiveAmount:
      type: string
      pattern: ^\d+(\.\d+)?

    AccountStatus:
      type: string
      enum:
        - active
        - inactive

    Account:
      type: object
      required: [ id, title, status ]
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        balances:
          $ref: '#/components/schemas/Balances'
        status:
          $ref: '#/components/schemas/AccountStatus'

    Balances:
      type: array
      description: >-
        Maps balance assets to their balances.
      items:
        $ref: '#/components/schemas/AssetBalance'

    AssetBalance:
      type: object
      required: [ id, asset, availableAmount ]
      properties:
        id:
          type: string
        asset:
          $ref: '#/components/schemas/AssetReference'
        availableAmount:
          $ref: '#/components/schemas/PositiveAmount'
        lockedAmount:
          $ref: '#/components/schemas/PositiveAmount'

    AssetCommonProperties:
      type: object
      required: [ id, name, symbol, type, decimalPlaces ]
      properties:
        id:
          type: string
        name:
          type: string
        symbol:
          type: string
        description:
          type: string
        decimalPlaces:
          type: integer
        testAsset:
          type: boolean

    BucketAsset:
      allOf:
        - $ref: '#/components/schemas/AssetCommonProperties'
        - type: object
          required: [ type ]
          properties:
            type:
              enum: [ BucketAsset ]

    Erc20Token:
      allOf:
        - $ref: '#/components/schemas/AssetCommonProperties'
        - type: object
          required: [ blockchain, contractAddress, type ]
          properties:
            type:
              enum: [ Erc20Token ]
            blockchain:
              $ref: '#/components/schemas/Blockchain'
            contractAddress:
              type: string
      example:
        blockchain: Ethereum
        name: Tether USD
        symbol: USDT
        decimalPlaces: 6
        contractAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7'

    Bep20Token:
      allOf:
        - $ref: '#/components/schemas/AssetCommonProperties'
        - type: object
          required: [ blockchain, contractAddress, type ]
          properties:
            type:
              enum: [ Bep20Token ]
            blockchain:
              $ref: '#/components/schemas/Blockchain'
            contractAddress:
              type: string

    StellarToken:
      allOf:
        - $ref: '#/components/schemas/AssetCommonProperties'
        - type: object
          required: [ blockchain, issuerAddress, stellarCurrencyCode, type ]
          properties:
            type:
              enum: [ StellarToken ]
            blockchain:
              $ref: '#/components/schemas/Blockchain'
            issuerAddress:
              type: string
            stellarCurrencyCode:
              type: string

    AssetDefinition:
      anyOf:
        - $ref: '#/components/schemas/BucketAsset'
        - $ref: '#/components/schemas/Erc20Token'
        - $ref: '#/components/schemas/Bep20Token'
        - $ref: '#/components/schemas/StellarToken'

    NationalCurrency:
      type: object
      required:
        - nationalCurrencyCode
      properties:
        nationalCurrencyCode:
          $ref: '#/components/schemas/NationalCurrencyCode'
        testAsset:
          type: boolean

    NativeCryptocurrency:
      type: object
      required:
        - cryptocurrencySymbol
      properties:
        blockchain:
          $ref: '#/components/schemas/Blockchain'
        cryptocurrencySymbol:
          $ref: '#/components/schemas/CryptocurrencySymbol'
        testAsset:
          type: boolean

    OtherAssetReference:
      type: object
      required:
        - assetId
      properties:
        assetId:
          description: ID of one of the assets returned in get-additional-assets.
          type: string

    CryptocurrencyReference:
      oneOf:
        - $ref: '#/components/schemas/NativeCryptocurrency'
        - $ref: '#/components/schemas/OtherAssetReference'

    AssetReference:
      oneOf:
        - $ref: '#/components/schemas/NationalCurrency'
        - $ref: '#/components/schemas/NativeCryptocurrency'
        - $ref: '#/components/schemas/OtherAssetReference'

    Blockchain:
      type: string
      enum:
        - Algorand
        - Avalanche
        - Bitcoin
        - BNB
        - Cardano
        - Casper
        - Celo
        - Cosmos
        - Cronos
        - Dogecoin
        - Ethereum
        - Ethereum Classic
        - Hedera
        - Litecoin
        - Monero
        - Polygon PoS
        - Polkadot
        - Solana
        - Stellar
        - Tezos
        - TRON
        - XRP

    Layer1Cryptocurrency:
      type: string
      enum:
        - ADA
        - ALGO
        - ATOM
        - AVAX
        - BNB
        - BTC
        - CELO
        - CRO
        - CSPR
        - DOGE
        - DOT
        - ETC
        - ETH
        - HBAR
        - LTC
        - SOL
        - TRX
        - XLM
        - XMR
        - XRP
        - XTZ

    Layer2Cryptocurrency:
      type: string
      enum:
        - ARB
        - IMX
        - MATIC
        - SNX

    CryptocurrencySymbol:
      anyOf:
        - $ref: '#/components/schemas/Layer1Cryptocurrency'
        - $ref: '#/components/schemas/Layer2Cryptocurrency'


    NationalCurrencyCode:
      type: string
      description: National currency codes as defined in ISO 4217.
      enum:
        - ADP
        - AED
        - AFA
        - AFN
        - ALK
        - ALL
        - AMD
        - ANG
        - AOA
        - AOK
        - AON
        - AOR
        - ARA
        - ARP
        - ARS
        - ARY
        - ATS
        - AUD
        - AWG
        - AYM
        - AZM
        - BAD
        - BAM
        - BBD
        - BDT
        - BEC
        - BEF
        - BEL
        - BGJ
        - BGK
        - BGL
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOP
        - BOV
        - BRB
        - BRC
        - BRE
        - BRL
        - BRN
        - BRR
        - BSD
        - BTN
        - BUK
        - BWP
        - BYB
        - BYN
        - BYR
        - BZD
        - CAD
        - CDF
        - CHC
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CSD
        - CSJ
        - CSK
        - CUC
        - CUP
        - CVE
        - CYP
        - CZK
        - DDM
        - DEM
        - DJF
        - DKK
        - DOP
        - DZD
        - ECS
        - ECV
        - EEK
        - EGP
        - ERN
        - ESA
        - ESB
        - ESP
        - ETB
        - EUR
        - FIM
        - FJD
        - FKP
        - FRF
        - GBP
        - GEK
        - GEL
        - GHC
        - GHP
        - GHS
        - GIP
        - GMD
        - GNE
        - GNF
        - GNS
        - GQE
        - GRD
        - GTQ
        - GWE
        - GWP
        - GYD
        - HKD
        - HNL
        - HRD
        - HRK
        - HTG
        - HUF
        - IDR
        - IEP
        - ILP
        - ILR
        - ILS
        - INR
        - IQD
        - IRR
        - ISJ
        - ISK
        - ITL
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAJ
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LSM
        - LTL
        - LTT
        - LUC
        - LUF
        - LUL
        - LVL
        - LVR
        - LYD
        - MAD
        - MDL
        - MGA
        - MGF
        - MKD
        - MLF
        - MMK
        - MNT
        - MOP
        - MRO
        - MRU
        - MTL
        - MTP
        - MUR
        - MVQ
        - MVR
        - MWK
        - MXN
        - MXP
        - MXV
        - MYR
        - MZE
        - MZM
        - NAD
        - NGN
        - NIC
        - NIO
        - NLG
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEH
        - PEI
        - PEN
        - PES
        - PGK
        - PHP
        - PKR
        - PLN
        - PLZ
        - PTE
        - PYG
        - QAR
        - RHD
        - ROK
        - ROL
        - RON
        - RSD
        - RUB
        - RUR
        - RWF
        - SAR
        - SBD
        - SCR
        - SDD
        - SDG
        - SDP
        - SEK
        - SGD
        - SHP
        - SIT
        - SKK
        - SLL
        - SOS
        - SRD
        - SRG
        - SSP
        - STD
        - STN
        - SUR
        - SVC
        - SYP
        - SZL
        - THB
        - TJR
        - TJS
        - TMM
        - TMT
        - TND
        - TOP
        - TPE
        - TRL
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UAK
        - UGS
        - UGW
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYN
        - UYP
        - UYU
        - UYW
        - UZS
        - VEB
        - VEF
        - VES
        - VNC
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XOF
        - XPF
        - XSU
        - XTS
        - XUA
        - XXX
        - YDD
        - YER
        - YUD
        - YUM
        - YUN
        - ZAL
        - ZAR
        - ZMK
        - ZMW
        - ZRN
        - ZRZ
        - ZWC
        - ZWD
        - ZWL
        - ZWN
        - ZWR
